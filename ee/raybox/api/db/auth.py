# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.30.0
# source: auth.sql
import datetime
import uuid
from collections.abc import AsyncIterator

import sqlalchemy
import sqlalchemy.ext.asyncio
from db import models

APPROVE_DEVICE_CODE = """-- name: approve_device_code \\:one
UPDATE device_codes
SET approved = true, user_id = :p1
WHERE user_code = :p2 AND approved = false AND expires_at > NOW()
RETURNING device_code, user_code, verification_uri, expires_at, user_id, approved, created_at
"""


CLEANUP_EXPIRED_DEVICE_CODES = """-- name: cleanup_expired_device_codes \\:exec

DELETE FROM device_codes
WHERE expires_at < NOW() AND approved = false
"""


CREATE_API_KEY = """-- name: create_api_key \\:one

INSERT INTO api_keys (
    user_id, key_hash, key_prefix, name
) VALUES (
    :p1, :p2, :p3, :p4
) RETURNING id, user_id, key_hash, key_prefix, name, last_used_at, created_at, expires_at
"""


CREATE_DEVICE_CODE = """-- name: create_device_code \\:one

INSERT INTO device_codes (
    device_code, user_code, expires_at
) VALUES (
    :p1, :p2, :p3
) RETURNING device_code, user_code, verification_uri, expires_at, user_id, approved, created_at
"""


DELETE_API_KEY = """-- name: delete_api_key \\:exec
DELETE FROM api_keys
WHERE id = :p1 AND user_id = :p2
"""


GET_API_KEY_BY_HASH = """-- name: get_api_key_by_hash \\:one
SELECT id, user_id, key_hash, key_prefix, name, last_used_at, created_at, expires_at FROM api_keys
WHERE key_hash = :p1 AND (expires_at IS NULL OR expires_at > NOW())
LIMIT 1
"""


GET_DEVICE_CODE_BY_DEVICE_CODE = """-- name: get_device_code_by_device_code \\:one
SELECT device_code, user_code, verification_uri, expires_at, user_id, approved, created_at FROM device_codes
WHERE device_code = :p1
LIMIT 1
"""


GET_DEVICE_CODE_BY_USER_CODE = """-- name: get_device_code_by_user_code \\:one
SELECT device_code, user_code, verification_uri, expires_at, user_id, approved, created_at FROM device_codes
WHERE user_code = :p1
LIMIT 1
"""


LIST_USER_API_KEYS = """-- name: list_user_api_keys \\:many
SELECT id, user_id, key_hash, key_prefix, name, last_used_at, created_at, expires_at FROM api_keys
WHERE user_id = :p1
ORDER BY created_at DESC
"""


UPDATE_API_KEY_LAST_USED = """-- name: update_api_key_last_used \\:exec
UPDATE api_keys
SET last_used_at = NOW()
WHERE id = :p1
"""


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def approve_device_code(
        self, *, user_id: uuid.UUID | None, user_code: str
    ) -> models.DeviceCode | None:
        row = (
            await self._conn.execute(
                sqlalchemy.text(APPROVE_DEVICE_CODE), {"p1": user_id, "p2": user_code}
            )
        ).first()
        if row is None:
            return None
        return models.DeviceCode(
            device_code=row[0],
            user_code=row[1],
            verification_uri=row[2],
            expires_at=row[3],
            user_id=row[4],
            approved=row[5],
            created_at=row[6],
        )

    async def cleanup_expired_device_codes(self) -> None:
        await self._conn.execute(sqlalchemy.text(CLEANUP_EXPIRED_DEVICE_CODES))

    async def create_api_key(
        self, *, user_id: uuid.UUID, key_hash: str, key_prefix: str, name: str
    ) -> models.ApiKey | None:
        row = (
            await self._conn.execute(
                sqlalchemy.text(CREATE_API_KEY),
                {
                    "p1": user_id,
                    "p2": key_hash,
                    "p3": key_prefix,
                    "p4": name,
                },
            )
        ).first()
        if row is None:
            return None
        return models.ApiKey(
            id=row[0],
            user_id=row[1],
            key_hash=row[2],
            key_prefix=row[3],
            name=row[4],
            last_used_at=row[5],
            created_at=row[6],
            expires_at=row[7],
        )

    async def create_device_code(
        self, *, device_code: uuid.UUID, user_code: str, expires_at: datetime.datetime
    ) -> models.DeviceCode | None:
        row = (
            await self._conn.execute(
                sqlalchemy.text(CREATE_DEVICE_CODE),
                {"p1": device_code, "p2": user_code, "p3": expires_at},
            )
        ).first()
        if row is None:
            return None
        return models.DeviceCode(
            device_code=row[0],
            user_code=row[1],
            verification_uri=row[2],
            expires_at=row[3],
            user_id=row[4],
            approved=row[5],
            created_at=row[6],
        )

    async def delete_api_key(self, *, id: uuid.UUID, user_id: uuid.UUID) -> None:
        await self._conn.execute(sqlalchemy.text(DELETE_API_KEY), {"p1": id, "p2": user_id})

    async def get_api_key_by_hash(self, *, key_hash: str) -> models.ApiKey | None:
        row = (
            await self._conn.execute(sqlalchemy.text(GET_API_KEY_BY_HASH), {"p1": key_hash})
        ).first()
        if row is None:
            return None
        return models.ApiKey(
            id=row[0],
            user_id=row[1],
            key_hash=row[2],
            key_prefix=row[3],
            name=row[4],
            last_used_at=row[5],
            created_at=row[6],
            expires_at=row[7],
        )

    async def get_device_code_by_device_code(
        self, *, device_code: uuid.UUID
    ) -> models.DeviceCode | None:
        row = (
            await self._conn.execute(
                sqlalchemy.text(GET_DEVICE_CODE_BY_DEVICE_CODE), {"p1": device_code}
            )
        ).first()
        if row is None:
            return None
        return models.DeviceCode(
            device_code=row[0],
            user_code=row[1],
            verification_uri=row[2],
            expires_at=row[3],
            user_id=row[4],
            approved=row[5],
            created_at=row[6],
        )

    async def get_device_code_by_user_code(self, *, user_code: str) -> models.DeviceCode | None:
        row = (
            await self._conn.execute(
                sqlalchemy.text(GET_DEVICE_CODE_BY_USER_CODE), {"p1": user_code}
            )
        ).first()
        if row is None:
            return None
        return models.DeviceCode(
            device_code=row[0],
            user_code=row[1],
            verification_uri=row[2],
            expires_at=row[3],
            user_id=row[4],
            approved=row[5],
            created_at=row[6],
        )

    async def list_user_api_keys(self, *, user_id: uuid.UUID) -> AsyncIterator[models.ApiKey]:
        result = await self._conn.stream(sqlalchemy.text(LIST_USER_API_KEYS), {"p1": user_id})
        async for row in result:
            yield models.ApiKey(
                id=row[0],
                user_id=row[1],
                key_hash=row[2],
                key_prefix=row[3],
                name=row[4],
                last_used_at=row[5],
                created_at=row[6],
                expires_at=row[7],
            )

    async def update_api_key_last_used(self, *, id: uuid.UUID) -> None:
        await self._conn.execute(sqlalchemy.text(UPDATE_API_KEY_LAST_USED), {"p1": id})
